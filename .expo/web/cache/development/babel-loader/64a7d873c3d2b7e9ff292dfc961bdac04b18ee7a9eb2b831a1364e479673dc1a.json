{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { SettingsScreen } from \"./SettingsScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createMaterialTopTabNavigator();\nvar Stack = createStackNavigator();\nfunction MyProfileScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: _jsx(Text, {\n      children: \"User Profile\"\n    })\n  });\n}\nfunction TasksScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: _jsx(Text, {\n      children: \"Pending Tasks\"\n    })\n  });\n}\nfunction CompletedScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: _jsx(Text, {\n      children: \"Completed\"\n    })\n  });\n}\nfunction ProfileScreen(_ref) {\n  var navigation = _ref.navigation;\n  return _jsxs(Tab.Navigator, {\n    tabBarOptions: {\n      activeTintColor: \"black\",\n      inactiveTintColor: \"gray\",\n      indicatorStyle: {\n        backgroundColor: \"black\"\n      }\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Profile\",\n      component: MyProfileScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Completed\",\n      component: CompletedScreen\n    }), _jsx(Tab.Screen, {\n      name: \"TasksPending\",\n      component: TasksScreen\n    })]\n  });\n}\nfunction AppStack() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen,\n      options: function options(_ref2) {\n        var navigation = _ref2.navigation;\n        return {\n          headerShown: false,\n          headerRight: function headerRight() {\n            return _jsx(View, {\n              children: _jsx(Button, {\n                title: \"Settings\",\n                onPress: function onPress() {\n                  return navigation.navigate(\"Settings\");\n                }\n              })\n            });\n          }\n        };\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen\n    })]\n  });\n}\nexport default AppStack;","map":{"version":3,"names":["React","View","Text","TouchableOpacity","Button","createMaterialTopTabNavigator","createStackNavigator","SettingsScreen","jsx","_jsx","jsxs","_jsxs","Tab","Stack","MyProfileScreen","style","flex","justifyContent","alignItems","children","TasksScreen","CompletedScreen","ProfileScreen","_ref","navigation","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","indicatorStyle","backgroundColor","Screen","name","component","AppStack","options","_ref2","headerShown","headerRight","title","onPress","navigate"],"sources":["C:/Users/skmola/Desktop/projects/worko/SCREENS/ProfileScreen.js"],"sourcesContent":["import React from \"react\";\r\nimport { View, Text, TouchableOpacity, Button } from \"react-native\";\r\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\r\n\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { SettingsScreen } from \"./SettingsScreen\";\r\n\r\nconst Tab = createMaterialTopTabNavigator();\r\nconst Stack = createStackNavigator();\r\n\r\nfunction MyProfileScreen() {\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n      <Text>User Profile</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction TasksScreen() {\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n      <Text>Pending Tasks</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction CompletedScreen() {\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n      <Text>Completed</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction ProfileScreen({ navigation }) {\r\n  return (\r\n    <Tab.Navigator\r\n      tabBarOptions={{\r\n        activeTintColor: \"black\",\r\n        inactiveTintColor: \"gray\",\r\n        indicatorStyle: { backgroundColor: \"black\" },\r\n      }}\r\n    >\r\n      <Tab.Screen name=\"Profile\" component={MyProfileScreen} />\r\n      <Tab.Screen name=\"Completed\" component={CompletedScreen} />\r\n      <Tab.Screen name=\"TasksPending\" component={TasksScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n}\r\n\r\nfunction AppStack() {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Profile\"\r\n        component={ProfileScreen}\r\n        options={({ navigation }) => ({\r\n          headerShown: false,\r\n          headerRight: () => (\r\n            <View>\r\n              <Button\r\n                title=\"Settings\"\r\n                onPress={() => navigation.navigate(\"Settings\")}\r\n              />\r\n            </View>\r\n          ),\r\n        })}\r\n      />\r\n      <Stack.Screen name=\"Settings\" component={SettingsScreen} />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nexport default AppStack;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}