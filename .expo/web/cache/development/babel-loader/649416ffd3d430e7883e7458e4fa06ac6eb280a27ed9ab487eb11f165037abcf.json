{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport queryString from \"query-string\";\nexport var UserApi = function () {\n  var _ref = _asyncToGenerator(function* (email, password) {\n    try {\n      var formData = {\n        username: email,\n        password: password\n      };\n      var encodedFormData = queryString.stringify(formData);\n      var response = yield fetch(\"http://127.0.0.1:8000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: encodedFormData\n      });\n      var result = yield response.json();\n      return result;\n    } catch (error) {\n      return error;\n    }\n  });\n  return function UserApi(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["queryString","UserApi","_ref","_asyncToGenerator","email","password","formData","username","encodedFormData","stringify","response","fetch","method","headers","body","result","json","error","_x","_x2","apply","arguments"],"sources":["C:/Users/skmola/Desktop/projects/worko/Api/UserApi.js"],"sourcesContent":["/*\r\n\r\nimport Api from \"./Api\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const result = await Api(\"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      data: {\r\n        username: email,\r\n        password: password,\r\n      },\r\n    });\r\n    return result;\r\n  } catch (error) {\r\n    return error.response.data;\r\n  }\r\n};\r\n\r\n\r\nimport { FormData } from \"expo\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"username\", email);\r\n    formData.append(\"password\", password);\r\n\r\n    const response = await fetch(\"login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n*/\r\nimport queryString from \"query-string\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const formData = {\r\n      username: email,\r\n      password: password,\r\n    };\r\n\r\n    const encodedFormData = queryString.stringify(formData);\r\n\r\n    const response = await fetch(\"http://127.0.0.1:8000/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: encodedFormData,\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"],"mappings":";AA8CA,OAAOA,WAAW,MAAM,cAAc;AAEtC,OAAO,IAAMC,OAAO;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAEC,QAAQ,EAAK;IAChD,IAAI;MACF,IAAMC,QAAQ,GAAG;QACfC,QAAQ,EAAEH,KAAK;QACfC,QAAQ,EAAEA;MACZ,CAAC;MAED,IAAMG,eAAe,GAAGR,WAAW,CAACS,SAAS,CAACH,QAAQ,CAAC;MAEvD,IAAMI,QAAQ,SAASC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAMO,MAAM,SAASL,QAAQ,CAACM,IAAI,EAAE;MACpC,OAAOD,MAAM;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAOA,KAAK;IACd;EACF,CAAC;EAAA,gBAtBYhB,OAAOA,CAAAiB,EAAA,EAAAC,GAAA;IAAA,OAAAjB,IAAA,CAAAkB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsBnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}