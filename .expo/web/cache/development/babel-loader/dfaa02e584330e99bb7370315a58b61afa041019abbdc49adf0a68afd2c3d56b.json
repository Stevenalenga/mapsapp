{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Api from \"./Api\";\nexport var UserApi = function () {\n  var _ref = _asyncToGenerator(function* (data) {\n    try {\n      var headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      var config = {\n        headers: headers,\n        withCredentials: true,\n        auth: {\n          username: \"your-username\",\n          password: \"your-password\"\n        }\n      };\n      var response = yield Api(\"login\", data, config);\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        throw new Error(\"An error occurred during login\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  });\n  return function UserApi(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Api","UserApi","_ref","_asyncToGenerator","data","headers","config","withCredentials","auth","username","password","response","status","Error","error","_x","apply","arguments"],"sources":["C:/Users/skmola/Desktop/projects/worko/Api/UserApi.js"],"sourcesContent":["import Api from \"./Api\";\r\n\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    const config = {\r\n      headers,\r\n      withCredentials: true, // Include credentials (cookies) in the request\r\n      auth: {\r\n        username: \"your-username\",\r\n        password: \"your-password\",\r\n      },\r\n    };\r\n\r\n    const response = await Api(\"login\", data, config);\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else {\r\n      throw new Error(\"An error occurred during login\");\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const response = await Api.post(\"/login\", data);\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n/*\r\nexport const UserApi = (data) => {\r\n  Api.post(\"/login\", async (req, res) => {\r\n\r\n    data : data\r\n  });\r\n  if (res.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n\r\n\r\n/*\r\nexport const UserApi = async (params) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    };\r\n\r\n    const result = await Api.post(\r\n      \"/login\",\r\n      { username: email, password: password },\r\n      { headers }\r\n    );\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nfirstName: 'Fred',\r\n    lastName: 'Flintstone'\r\n  })\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n\r\n\r\n\r\n  const user = db.query(User).filter(User.email == form_data.username).first();\r\n\r\n  if (!user) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Verify the password\r\n  if (!verify_password(form_data.password, user.hashed_password)) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Generate an access token using a UUID\r\n  const access_token = uuidv4();\r\n\r\n  // Return the access token and token type as the response\r\n  return res.json({ access_token, token_type: 'bearer' });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const result = Api(\"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n\r\n      data: data,\r\n    });\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nconst BASE_URL = \"http://127.0.0.1:8000\";\r\n\r\nexport const UserApi = {\r\n  post: async (url, data) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n};\r\n\r\n*/\r\n"],"mappings":";AAAA,OAAOA,GAAG;AAEV,OAAO,IAAMC,OAAO;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAI,EAAK;IACrC,IAAI;MACF,IAAMC,OAAO,GAAG;QACd,cAAc,EAAE;MAClB,CAAC;MAED,IAAMC,MAAM,GAAG;QACbD,OAAO,EAAPA,OAAO;QACPE,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAE;UACJC,QAAQ,EAAE,eAAe;UACzBC,QAAQ,EAAE;QACZ;MACF,CAAC;MAED,IAAMC,QAAQ,SAASX,GAAG,CAAC,OAAO,EAAEI,IAAI,EAAEE,MAAM,CAAC;MAEjD,IAAIK,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOD,QAAQ,CAACP,IAAI;MACtB,CAAC,MAAM;QACL,MAAM,IAAIS,KAAK,CAAC,gCAAgC,CAAC;MACnD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAzBYb,OAAOA,CAAAc,EAAA;IAAA,OAAAb,IAAA,CAAAc,KAAA,OAAAC,SAAA;EAAA;AAAA,GAyBnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}