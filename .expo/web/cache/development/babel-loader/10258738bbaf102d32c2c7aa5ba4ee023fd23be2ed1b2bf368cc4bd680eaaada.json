{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Api from \"./Api\";\nfunction UserApi(params) {\n  Api.post(\"/login\", function () {\n    var _ref = _asyncToGenerator(function* (req, res) {\n      var _req$body = req.body,\n        db = _req$body.db,\n        form_data = _req$body.form_data;\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\nexport default UserApi;","map":{"version":3,"names":["Api","UserApi","params","post","_ref","_asyncToGenerator","req","res","_req$body","body","db","form_data","_x","_x2","apply","arguments"],"sources":["C:/Users/skmola/Desktop/projects/worko/Api/UserApi.js"],"sourcesContent":["import Api from \"./Api\";\r\n\r\nfunction UserApi(params) {\r\n  Api.post(\"/login\", async (req, res) => {\r\n    const { db, form_data } = req.body;\r\n  });\r\n}\r\n\r\nexport default UserApi;\r\n\r\n/*\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    const result = await Api.post('/login', { db: params.db, form_data: params.form_data }, { headers });\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nfirstName: 'Fred',\r\n    lastName: 'Flintstone'\r\n  })\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n\r\n\r\n\r\n  const user = db.query(User).filter(User.email == form_data.username).first();\r\n\r\n  if (!user) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Verify the password\r\n  if (!verify_password(form_data.password, user.hashed_password)) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Generate an access token using a UUID\r\n  const access_token = uuidv4();\r\n\r\n  // Return the access token and token type as the response\r\n  return res.json({ access_token, token_type: 'bearer' });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const result =  Api(\"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n\r\n      data: data,\r\n    });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    return error.response.data;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nconst BASE_URL = \"http://127.0.0.1:8000\";\r\n\r\nexport const UserApi = {\r\n  post: async (url, data) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n};\r\n\r\n*/\r\n"],"mappings":";AAAA,OAAOA,GAAG;AAEV,SAASC,OAAOA,CAACC,MAAM,EAAE;EACvBF,GAAG,CAACG,IAAI,CAAC,QAAQ;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,GAAG,EAAEC,GAAG,EAAK;MACrC,IAAAC,SAAA,GAA0BF,GAAG,CAACG,IAAI;QAA1BC,EAAE,GAAAF,SAAA,CAAFE,EAAE;QAAEC,SAAS,GAAAH,SAAA,CAATG,SAAS;IACvB,CAAC;IAAA,iBAAAC,EAAA,EAAAC,GAAA;MAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;EAAA,IAAC;AACJ;AAEA,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}