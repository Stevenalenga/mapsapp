{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skmola.TELKOM\\\\Desktop\\\\projects\\\\worko\\\\SCREENS\\\\SearchScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { SearchBar } from \"react-native-elements\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_SEARCHES = 5;\nexport default function MyScreen() {\n  const [search, setSearch] = useState(\"\");\n  const [recentSearches, setRecentSearches] = useState([]);\n  useEffect(() => {\n    const loadRecentSearches = async () => {\n      const savedSearches = await AsyncStorage.getItem(\"recentSearches\");\n      if (savedSearches) {\n        setRecentSearches(JSON.parse(savedSearches));\n      }\n    };\n    loadRecentSearches();\n  }, []);\n  const updateSearch = text => {\n    setSearch(text);\n  };\n  const handleSearch = async () => {\n    if (search.trim() === \"\") return;\n    const updatedSearches = [search, ...recentSearches].slice(0, MAX_SEARCHES).filter((value, index, self) => self.indexOf(value) === index);\n    setRecentSearches(updatedSearches);\n    await AsyncStorage.setItem(\"recentSearches\", JSON.stringify(updatedSearches));\n    setSearch(\"\");\n  };\n  const handleRecentSearch = item => {\n    setSearch(item);\n  };\n  return _jsxDEV(View, {\n    children: [_jsxDEV(SearchBar, {\n      placeholder: \"Search\",\n      round: true,\n      containerStyle: styles.searchBarContainer,\n      inputContainerStyle: styles.searchBarInputContainer,\n      searchIcon: _jsxDEV(Ionicons, {\n        name: \"search\",\n        size: 20,\n        color: \"gray\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this),\n      onChangeText: updateSearch,\n      value: search,\n      onSubmitEditing: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), recentSearches.length > 0 && _jsxDEV(FlatList, {\n      data: recentSearches,\n      keyExtractor: (item, index) => index.toString(),\n      renderItem: ({\n        item\n      }) => _jsxDEV(TouchableOpacity, {\n        onPress: () => handleRecentSearch(item),\n        children: _jsxDEV(Text, {\n          style: styles.recentSearchItem,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\nconst styles = {\n  searchBarContainer: {\n    backgroundColor: \"transparent\",\n    borderBottomColor: \"transparent\",\n    borderTopColor: \"transparent\",\n    paddingBottom: 0,\n    paddingTop: 0\n  },\n  searchBarInputContainer: {\n    backgroundColor: \"#e8e8e8\",\n    borderRadius: 20,\n    height: 40\n  },\n  recentSearchItem: {\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#ccc\"\n  }\n};","map":{"version":3,"names":["React","useState","useEffect","View","FlatList","Text","TouchableOpacity","SearchBar","Ionicons","AsyncStorage","jsxDEV","_jsxDEV","MAX_SEARCHES","MyScreen","search","setSearch","recentSearches","setRecentSearches","loadRecentSearches","savedSearches","getItem","JSON","parse","updateSearch","text","handleSearch","trim","updatedSearches","slice","filter","value","index","self","indexOf","setItem","stringify","handleRecentSearch","item","children","placeholder","round","containerStyle","styles","searchBarContainer","inputContainerStyle","searchBarInputContainer","searchIcon","name","size","color","fileName","_jsxFileName","lineNumber","columnNumber","onChangeText","onSubmitEditing","length","data","keyExtractor","toString","renderItem","onPress","style","recentSearchItem","backgroundColor","borderBottomColor","borderTopColor","paddingBottom","paddingTop","borderRadius","height","padding","borderBottomWidth"],"sources":["C:/Users/skmola.TELKOM/Desktop/projects/worko/SCREENS/SearchScreen.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { View, FlatList, Text, TouchableOpacity } from \"react-native\";\r\nimport { SearchBar } from \"react-native-elements\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst MAX_SEARCHES = 5;\r\n\r\nexport default function MyScreen() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recentSearches, setRecentSearches] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load recent searches from AsyncStorage when the component mounts\r\n    const loadRecentSearches = async () => {\r\n      const savedSearches = await AsyncStorage.getItem(\"recentSearches\");\r\n      if (savedSearches) {\r\n        setRecentSearches(JSON.parse(savedSearches));\r\n      }\r\n    };\r\n\r\n    loadRecentSearches();\r\n  }, []);\r\n\r\n  const updateSearch = (text) => {\r\n    setSearch(text);\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (search.trim() === \"\") return;\r\n\r\n    // Update recent searches\r\n    const updatedSearches = [search, ...recentSearches]\r\n      .slice(0, MAX_SEARCHES) // Keep only the latest 5 searches\r\n      .filter((value, index, self) => self.indexOf(value) === index); // Remove duplicates\r\n\r\n    setRecentSearches(updatedSearches);\r\n    await AsyncStorage.setItem(\"recentSearches\", JSON.stringify(updatedSearches));\r\n    \r\n    setSearch(\"\"); // Clear the search input\r\n  };\r\n\r\n  const handleRecentSearch = (item) => {\r\n    setSearch(item); // Set the search input to the selected recent search\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <SearchBar\r\n        placeholder=\"Search\"\r\n        round\r\n        containerStyle={styles.searchBarContainer}\r\n        inputContainerStyle={styles.searchBarInputContainer}\r\n        searchIcon={<Ionicons name=\"search\" size={20} color=\"gray\" />}\r\n        onChangeText={updateSearch}\r\n        value={search}\r\n        onSubmitEditing={handleSearch} // Trigger handleSearch on submit\r\n      />\r\n      {recentSearches.length > 0 && (\r\n        <FlatList\r\n          data={recentSearches}\r\n          keyExtractor={(item, index) => index.toString()}\r\n          renderItem={({ item }) => (\r\n            <TouchableOpacity onPress={() => handleRecentSearch(item)}>\r\n              <Text style={styles.recentSearchItem}>{item}</Text>\r\n            </TouchableOpacity>\r\n          )}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  searchBarContainer: {\r\n    backgroundColor: \"transparent\",\r\n    borderBottomColor: \"transparent\",\r\n    borderTopColor: \"transparent\",\r\n    paddingBottom: 0,\r\n    paddingTop: 0,\r\n  },\r\n  searchBarInputContainer: {\r\n    backgroundColor: \"#e8e8e8\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n  },\r\n  recentSearchItem: {\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#ccc\",\r\n  },\r\n};\r\n\r\n\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { View, FlatList, Text, TouchableOpacity, Button } from \"react-native\";\r\nimport { SearchBar } from \"react-native-elements\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst MAX_SEARCHES = 5;\r\n\r\nexport default function MyScreen() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recentSearches, setRecentSearches] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const loadRecentSearches = async () => {\r\n      const savedSearches = await AsyncStorage.getItem(\"recentSearches\");\r\n      if (savedSearches) {\r\n        setRecentSearches(JSON.parse(savedSearches));\r\n      }\r\n    };\r\n\r\n    loadRecentSearches();\r\n  }, []);\r\n\r\n  const updateSearch = (text) => {\r\n    setSearch(text);\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (search.trim() === \"\") return;\r\n\r\n    const updatedSearches = [search, ...recentSearches]\r\n      .slice(0, MAX_SEARCHES)\r\n      .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    setRecentSearches(updatedSearches);\r\n    await AsyncStorage.setItem(\"recentSearches\", JSON.stringify(updatedSearches));\r\n    \r\n    setSearch(\"\");\r\n  };\r\n\r\n  const handleRecentSearch = (item) => {\r\n    setSearch(item);\r\n  };\r\n\r\n  const deleteRecentSearch = async (itemToDelete) => {\r\n    const updatedSearches = recentSearches.filter(item => item !== itemToDelete);\r\n    setRecentSearches(updatedSearches);\r\n    await AsyncStorage.setItem(\"recentSearches\", JSON.stringify(updatedSearches));\r\n  };\r\n\r\n  const clearAllSearches = async () => {\r\n    setRecentSearches([]);\r\n    await AsyncStorage.removeItem(\"recentSearches\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <SearchBar\r\n        placeholder=\"Search\"\r\n        round\r\n        containerStyle={styles.searchBarContainer}\r\n        inputContainerStyle={styles.searchBarInputContainer}\r\n        searchIcon={<Ionicons name=\"search\" size={20} color=\"gray\" />}\r\n        onChangeText={updateSearch}\r\n        value={search}\r\n        onSubmitEditing={handleSearch}\r\n      />\r\n      \r\n      {recentSearches.length > 0 && (\r\n        <>\r\n          <FlatList\r\n            data={recentSearches}\r\n            keyExtractor={(item, index) => index.toString()}\r\n            renderItem={({ item }) => (\r\n              <View style={styles.recentSearchItemContainer}>\r\n                <TouchableOpacity onPress={() => handleRecentSearch(item)}>\r\n                  <Text style={styles.recentSearchItem}>{item}</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={() => deleteRecentSearch(item)}>\r\n                  <Text style={styles.deleteButton}>X</Text> {/* Delete button }\r\n                </TouchableOpacity>\r\n              </View>\r\n            )}\r\n          />\r\n          <Button title=\"Clear All Searches\" onPress={clearAllSearches} /> \r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  searchBarContainer: {\r\n    backgroundColor: \"transparent\",\r\n    borderBottomColor: \"transparent\",\r\n    borderTopColor: \"transparent\",\r\n    paddingBottom: 0,\r\n    paddingTop: 0,\r\n  },\r\n  searchBarInputContainer: {\r\n    backgroundColor: \"#e8e8e8\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n  },\r\n  recentSearchItemContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\", // Align items to the ends\r\n    alignItems: \"center\", // Center align vertically\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#ccc\",\r\n  },\r\n  recentSearchItem: {\r\n    fontSize: 16,\r\n  },\r\n  deleteButton: {\r\n    color: \"red\", // Change color as needed\r\n    marginLeft: 10, // Space between text and delete button\r\n  },\r\n};\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}