{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Api from \"./Api\";\nexport var UserApi = function () {\n  var _ref = _asyncToGenerator(function* (email, password) {\n    try {\n      var result = yield Api(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        data: {\n          username: email,\n          password: password\n        }\n      });\n      return result;\n    } catch (error) {\n      return error.response.data;\n    }\n  });\n  return function UserApi(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Api","UserApi","_ref","_asyncToGenerator","email","password","result","method","headers","data","username","error","response","_x","_x2","apply","arguments"],"sources":["C:/Users/skmola/Desktop/projects/worko/Api/UserApi.js"],"sourcesContent":["import Api from \"./Api\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const result = await Api(\"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      data: {\r\n        username: email,\r\n        password: password,\r\n      },\r\n    });\r\n    return result;\r\n  } catch (error) {\r\n    return error.response.data;\r\n  }\r\n};\r\n\r\n/*\r\nimport { FormData } from \"expo\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"username\", email);\r\n    formData.append(\"password\", password);\r\n\r\n    const response = await fetch(\"http://127.0.0.1:8000\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/*\r\nimport queryString from \"query-string\";\r\n\r\nexport const UserApi = async (email, password) => {\r\n  try {\r\n    const formData = {\r\n      username: email,\r\n      password: password,\r\n    };\r\n\r\n    const encodedFormData = queryString.stringify(formData);\r\n\r\n    const response = await fetch(\"http://127.0.0.1:8000/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: encodedFormData,\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n*/\r\n"],"mappings":";AAAA,OAAOA,GAAG;AAEV,OAAO,IAAMC,OAAO;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,KAAK,EAAEC,QAAQ,EAAK;IAChD,IAAI;MACF,IAAMC,MAAM,SAASN,GAAG,CAAC,QAAQ,EAAE;QACjCO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE;UACJC,QAAQ,EAAEN,KAAK;UACfC,QAAQ,EAAEA;QACZ;MACF,CAAC,CAAC;MACF,OAAOC,MAAM;IACf,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,QAAQ,CAACH,IAAI;IAC5B;EACF,CAAC;EAAA,gBAhBYR,OAAOA,CAAAY,EAAA,EAAAC,GAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgBnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}