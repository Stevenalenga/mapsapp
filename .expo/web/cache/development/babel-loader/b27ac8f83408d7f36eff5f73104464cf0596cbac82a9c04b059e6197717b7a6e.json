{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Api from \"./Api\";\nexport var UserApi = function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    var username = _ref.username,\n      password = _ref.password;\n    try {\n      var formData = new URLSearchParams();\n      formData.append(\"username\", username);\n      formData.append(\"password\", password);\n      var result = yield Api.post(\"/login\", formData, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"X-CSRFToken\": getCookie('csrftoken')\n        }\n      });\n      console.log(result);\n      if (result.status === 200) {\n        return result;\n      } else if (result.status === 300) {} else if (result.status === 400) {} else if (result.status === 500) {}\n    } catch (error) {\n      console.error(\"Login error: \", error.response || error.message);\n      throw error;\n    }\n  });\n  return function UserApi(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}","map":{"version":3,"names":["Api","UserApi","_ref2","_asyncToGenerator","_ref","username","password","formData","URLSearchParams","append","result","post","headers","getCookie","console","log","status","error","response","message","_x","apply","arguments","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent"],"sources":["C:/Users/skmola/Desktop/projects/worko/Api/UserApi.js"],"sourcesContent":["import Api from \"./Api\";\r\n\r\nexport const UserApi = async ({ username, password }) => {\r\n  try {\r\n    // Create a URL-encoded form instead of using FormData\r\n    const formData = new URLSearchParams();\r\n    formData.append(\"username\", username);\r\n    formData.append(\"password\", password);\r\n\r\n    const result = await Api.post(\"/login\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",  // More appropriate for simple form data\r\n        \"X-CSRFToken\": getCookie('csrftoken')  // Ensure CSRF token is passed\r\n      },\r\n    });\r\n\r\n    console.log(result);\r\n    if (result.status === 200) {\r\n      return result;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Login error: \", error.response || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get the CSRF token from cookies (if not already defined)\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n/*\r\nexport const UserApi = async ({ username, password }) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"username\", username);\r\n    formData.append(\"password\", password);\r\n\r\n    const result = await Api.post(\"/login\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    }).then(function (response) {\r\n      console.log(response);\r\n    });\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nexport const UserApi = async ({ username, password }) => {\r\n  try {\r\n    const result = await Api.post(\"/login\", {\r\n      username: username,\r\n      password: password,\r\n    });\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n\r\n    const config = {\r\n      headers,\r\n      withCredentials: true, // Include credentials (cookies) in the request\r\n      auth: {\r\n        username: \"your-username\",\r\n        password: \"your-password\",\r\n      },\r\n    };\r\n\r\n    const response = await Api(\"login\", data, config);\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else {\r\n      throw new Error(\"An error occurred during login\");\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const response = await Api.post(\"/login\", data);\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n/*\r\nexport const UserApi = (data) => {\r\n  Api.post(\"/login\", async (req, res) => {\r\n\r\n    data : data\r\n  });\r\n  if (res.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n\r\n\r\n/*\r\nexport const UserApi = async (params) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    };\r\n\r\n    const result = await Api.post(\r\n      \"/login\",\r\n      { username: email, password: password },\r\n      { headers }\r\n    );\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    } else if (response.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (response.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (response.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nimport Api from './Api'; // Import the API module\r\n\r\nconst UserApi = async (params) => {\r\n  try {\r\n    const response = await Api.post('/login', { db: params.db, form_data: params.form_data });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default UserApi;\r\n\r\n\r\n\r\nfirstName: 'Fred',\r\n    lastName: 'Flintstone'\r\n  })\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n\r\n\r\n\r\n  const user = db.query(User).filter(User.email == form_data.username).first();\r\n\r\n  if (!user) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Verify the password\r\n  if (!verify_password(form_data.password, user.hashed_password)) {\r\n    return res.status(400).json({ detail: 'Incorrect email or password' });\r\n  }\r\n\r\n  // Generate an access token using a UUID\r\n  const access_token = uuidv4();\r\n\r\n  // Return the access token and token type as the response\r\n  return res.json({ access_token, token_type: 'bearer' });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nexport const UserApi = async (data) => {\r\n  try {\r\n    const result = Api(\"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n\r\n      data: data,\r\n    });\r\n\r\n    if (result.status === 200) {\r\n      return result.data;\r\n    } else if (result.status === 300) {\r\n      // Handle status 300 response\r\n    } else if (result.status === 400) {\r\n      // Handle status 400 response\r\n    } else if (result.status === 500) {\r\n      // Handle status 500 response\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\nconst BASE_URL = \"http://127.0.0.1:8000\";\r\n\r\nexport const UserApi = {\r\n  post: async (url, data) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}${url}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed\");\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  },\r\n};\r\n\r\n*/\r\n"],"mappings":";AAAA,OAAOA,GAAG;AAEV,OAAO,IAAMC,OAAO;EAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAAC,IAAA,EAAkC;IAAA,IAAzBC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAChD,IAAI;MAEF,IAAMC,QAAQ,GAAG,IAAIC,eAAe,EAAE;MACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;MACrCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;MAErC,IAAMI,MAAM,SAASV,GAAG,CAACW,IAAI,CAAC,QAAQ,EAAEJ,QAAQ,EAAE;QAChDK,OAAO,EAAE;UACP,cAAc,EAAE,mCAAmC;UACnD,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC;MACF,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;MACnB,IAAIA,MAAM,CAACM,MAAM,KAAK,GAAG,EAAE;QACzB,OAAON,MAAM;MACf,CAAC,MAAM,IAAIA,MAAM,CAACM,MAAM,KAAK,GAAG,EAAE,CAElC,CAAC,MAAM,IAAIN,MAAM,CAACM,MAAM,KAAK,GAAG,EAAE,CAElC,CAAC,MAAM,IAAIN,MAAM,CAACM,MAAM,KAAK,GAAG,EAAE,CAElC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,OAAO,CAAC;MAC/D,MAAMF,KAAK;IACb;EACF,CAAC;EAAA,gBA5BYhB,OAAOA,CAAAmB,EAAA;IAAA,OAAAlB,KAAA,CAAAmB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA4BnB;AAGD,SAAST,SAASA,CAACU,IAAI,EAAE;EACvB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;IAC3C,IAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAMH,MAAM,GAAGC,OAAO,CAACE,CAAC,CAAC,CAACE,IAAI,EAAE;MAChC,IAAIL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAET,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,KAAMP,IAAI,GAAG,GAAI,EAAE;QACvDC,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAS,CAACT,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE;MACJ;IACJ;EACJ;EACA,OAAON,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}